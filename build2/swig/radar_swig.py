# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radar_swig', [dirname(__file__)])
        except ImportError:
            import _radar_swig
            return _radar_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_radar_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _radar_swig = swig_import_helper()
    del swig_import_helper
else:
    import _radar_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _radar_swig.high_res_timer_epoch()
class signal_generator_cw_c(object):
    """Proxy of C++ gr::radar::signal_generator_cw_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int packet_len, int samp_rate, pmt_vector_float frequency, float amplitude, std::string const & len_key="packet_len") -> signal_generator_cw_c_sptr"""
        return _radar_swig.signal_generator_cw_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_signal_generator_cw_c
    __del__ = lambda self : None;
signal_generator_cw_c_swigregister = _radar_swig.signal_generator_cw_c_swigregister
signal_generator_cw_c_swigregister(signal_generator_cw_c)

def signal_generator_cw_c_make(*args, **kwargs):
  """signal_generator_cw_c_make(int packet_len, int samp_rate, pmt_vector_float frequency, float amplitude, std::string const & len_key="packet_len") -> signal_generator_cw_c_sptr"""
  return _radar_swig.signal_generator_cw_c_make(*args, **kwargs)

class signal_generator_cw_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::signal_generator_cw_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::signal_generator_cw_c)> self) -> signal_generator_cw_c_sptr
        __init__(boost::shared_ptr<(gr::radar::signal_generator_cw_c)> self, signal_generator_cw_c p) -> signal_generator_cw_c_sptr
        """
        this = _radar_swig.new_signal_generator_cw_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(signal_generator_cw_c_sptr self) -> signal_generator_cw_c"""
        return _radar_swig.signal_generator_cw_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_signal_generator_cw_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(signal_generator_cw_c_sptr self, int packet_len, int samp_rate, pmt_vector_float frequency, float amplitude, std::string const & len_key="packet_len") -> signal_generator_cw_c_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(signal_generator_cw_c_sptr self) -> unsigned int"""
        return _radar_swig.signal_generator_cw_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(signal_generator_cw_c_sptr self, int which, int delay)
        declare_sample_delay(signal_generator_cw_c_sptr self, unsigned int delay)
        """
        return _radar_swig.signal_generator_cw_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(signal_generator_cw_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.signal_generator_cw_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(signal_generator_cw_c_sptr self) -> double"""
        return _radar_swig.signal_generator_cw_c_sptr_relative_rate(self)

    def start(self):
        """start(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_start(self)

    def stop(self):
        """stop(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(signal_generator_cw_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.signal_generator_cw_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(signal_generator_cw_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.signal_generator_cw_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(signal_generator_cw_c_sptr self, int m)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(signal_generator_cw_c_sptr self)"""
        return _radar_swig.signal_generator_cw_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(signal_generator_cw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(signal_generator_cw_c_sptr self, int m)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(signal_generator_cw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(signal_generator_cw_c_sptr self, long max_output_buffer)
        set_max_output_buffer(signal_generator_cw_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.signal_generator_cw_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(signal_generator_cw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(signal_generator_cw_c_sptr self, long min_output_buffer)
        set_min_output_buffer(signal_generator_cw_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.signal_generator_cw_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(signal_generator_cw_c_sptr self, int which) -> float
        pc_input_buffers_full_var(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(signal_generator_cw_c_sptr self, int which) -> float
        pc_output_buffers_full_var(signal_generator_cw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_cw_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(signal_generator_cw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_cw_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(signal_generator_cw_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(signal_generator_cw_c_sptr self)"""
        return _radar_swig.signal_generator_cw_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(signal_generator_cw_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.signal_generator_cw_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(signal_generator_cw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(signal_generator_cw_c_sptr self, int priority) -> int"""
        return _radar_swig.signal_generator_cw_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(signal_generator_cw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(signal_generator_cw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(signal_generator_cw_c_sptr self) -> long"""
        return _radar_swig.signal_generator_cw_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(signal_generator_cw_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.signal_generator_cw_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(signal_generator_cw_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.signal_generator_cw_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(signal_generator_cw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_cw_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(signal_generator_cw_c_sptr self, std::string name)"""
        return _radar_swig.signal_generator_cw_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(signal_generator_cw_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.signal_generator_cw_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(signal_generator_cw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(signal_generator_cw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(signal_generator_cw_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.signal_generator_cw_c_sptr_message_subscribers(self, *args, **kwargs)

signal_generator_cw_c_sptr_swigregister = _radar_swig.signal_generator_cw_c_sptr_swigregister
signal_generator_cw_c_sptr_swigregister(signal_generator_cw_c_sptr)

signal_generator_cw_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
signal_generator_cw_c = signal_generator_cw_c.make;

class signal_generator_fmcw_c(object):
    """Proxy of C++ gr::radar::signal_generator_fmcw_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int samp_rate, int samp_up, int samp_down, int samp_cw, float freq_cw, float freq_sweep, 
            float amplitude, std::string const & len_key="packet_len") -> signal_generator_fmcw_c_sptr
        """
        return _radar_swig.signal_generator_fmcw_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_signal_generator_fmcw_c
    __del__ = lambda self : None;
signal_generator_fmcw_c_swigregister = _radar_swig.signal_generator_fmcw_c_swigregister
signal_generator_fmcw_c_swigregister(signal_generator_fmcw_c)

def signal_generator_fmcw_c_make(*args, **kwargs):
  """
    signal_generator_fmcw_c_make(int samp_rate, int samp_up, int samp_down, int samp_cw, float freq_cw, float freq_sweep, 
        float amplitude, std::string const & len_key="packet_len") -> signal_generator_fmcw_c_sptr
    """
  return _radar_swig.signal_generator_fmcw_c_make(*args, **kwargs)

class signal_generator_fmcw_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::signal_generator_fmcw_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::signal_generator_fmcw_c)> self) -> signal_generator_fmcw_c_sptr
        __init__(boost::shared_ptr<(gr::radar::signal_generator_fmcw_c)> self, signal_generator_fmcw_c p) -> signal_generator_fmcw_c_sptr
        """
        this = _radar_swig.new_signal_generator_fmcw_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(signal_generator_fmcw_c_sptr self) -> signal_generator_fmcw_c"""
        return _radar_swig.signal_generator_fmcw_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_signal_generator_fmcw_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(signal_generator_fmcw_c_sptr self, int samp_rate, int samp_up, int samp_down, int samp_cw, float freq_cw, float freq_sweep, 
            float amplitude, std::string const & len_key="packet_len") -> signal_generator_fmcw_c_sptr
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(signal_generator_fmcw_c_sptr self) -> unsigned int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(signal_generator_fmcw_c_sptr self, int which, int delay)
        declare_sample_delay(signal_generator_fmcw_c_sptr self, unsigned int delay)
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(signal_generator_fmcw_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(signal_generator_fmcw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(signal_generator_fmcw_c_sptr self) -> double"""
        return _radar_swig.signal_generator_fmcw_c_sptr_relative_rate(self)

    def start(self):
        """start(signal_generator_fmcw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fmcw_c_sptr_start(self)

    def stop(self):
        """stop(signal_generator_fmcw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fmcw_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(signal_generator_fmcw_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.signal_generator_fmcw_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(signal_generator_fmcw_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.signal_generator_fmcw_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(signal_generator_fmcw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(signal_generator_fmcw_c_sptr self, int m)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(signal_generator_fmcw_c_sptr self)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(signal_generator_fmcw_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fmcw_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(signal_generator_fmcw_c_sptr self, int m)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(signal_generator_fmcw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(signal_generator_fmcw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_fmcw_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(signal_generator_fmcw_c_sptr self, long max_output_buffer)
        set_max_output_buffer(signal_generator_fmcw_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(signal_generator_fmcw_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_fmcw_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(signal_generator_fmcw_c_sptr self, long min_output_buffer)
        set_min_output_buffer(signal_generator_fmcw_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_input_buffers_full(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_input_buffers_full_var(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_output_buffers_full(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(signal_generator_fmcw_c_sptr self, int which) -> float
        pc_output_buffers_full_var(signal_generator_fmcw_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(signal_generator_fmcw_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fmcw_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(signal_generator_fmcw_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(signal_generator_fmcw_c_sptr self)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(signal_generator_fmcw_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.signal_generator_fmcw_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(signal_generator_fmcw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(signal_generator_fmcw_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(signal_generator_fmcw_c_sptr self, int priority) -> int"""
        return _radar_swig.signal_generator_fmcw_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(signal_generator_fmcw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fmcw_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(signal_generator_fmcw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fmcw_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(signal_generator_fmcw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(signal_generator_fmcw_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(signal_generator_fmcw_c_sptr self) -> long"""
        return _radar_swig.signal_generator_fmcw_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(signal_generator_fmcw_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(signal_generator_fmcw_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.signal_generator_fmcw_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(signal_generator_fmcw_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fmcw_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(signal_generator_fmcw_c_sptr self, std::string name)"""
        return _radar_swig.signal_generator_fmcw_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(signal_generator_fmcw_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.signal_generator_fmcw_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(signal_generator_fmcw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(signal_generator_fmcw_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(signal_generator_fmcw_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fmcw_c_sptr_message_subscribers(self, *args, **kwargs)

signal_generator_fmcw_c_sptr_swigregister = _radar_swig.signal_generator_fmcw_c_sptr_swigregister
signal_generator_fmcw_c_sptr_swigregister(signal_generator_fmcw_c_sptr)

signal_generator_fmcw_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
signal_generator_fmcw_c = signal_generator_fmcw_c.make;

class split_cc(object):
    """Proxy of C++ gr::radar::split_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int packet_num, std::vector< int,std::allocator< int > > const packet_parts, std::string const & len_key="packet_len") -> split_cc_sptr"""
        return _radar_swig.split_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_split_cc
    __del__ = lambda self : None;
split_cc_swigregister = _radar_swig.split_cc_swigregister
split_cc_swigregister(split_cc)

def split_cc_make(*args, **kwargs):
  """split_cc_make(int packet_num, std::vector< int,std::allocator< int > > const packet_parts, std::string const & len_key="packet_len") -> split_cc_sptr"""
  return _radar_swig.split_cc_make(*args, **kwargs)

class split_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::split_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::split_cc)> self) -> split_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::split_cc)> self, split_cc p) -> split_cc_sptr
        """
        this = _radar_swig.new_split_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(split_cc_sptr self) -> split_cc"""
        return _radar_swig.split_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_split_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(split_cc_sptr self, int packet_num, std::vector< int,std::allocator< int > > const packet_parts, std::string const & len_key="packet_len") -> split_cc_sptr"""
        return _radar_swig.split_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(split_cc_sptr self) -> unsigned int"""
        return _radar_swig.split_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(split_cc_sptr self, int which, int delay)
        declare_sample_delay(split_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.split_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(split_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.split_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(split_cc_sptr self) -> int"""
        return _radar_swig.split_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(split_cc_sptr self) -> double"""
        return _radar_swig.split_cc_sptr_relative_rate(self)

    def start(self):
        """start(split_cc_sptr self) -> bool"""
        return _radar_swig.split_cc_sptr_start(self)

    def stop(self):
        """stop(split_cc_sptr self) -> bool"""
        return _radar_swig.split_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(split_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.split_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(split_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.split_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(split_cc_sptr self) -> int"""
        return _radar_swig.split_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(split_cc_sptr self, int m)"""
        return _radar_swig.split_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(split_cc_sptr self)"""
        return _radar_swig.split_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(split_cc_sptr self) -> bool"""
        return _radar_swig.split_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(split_cc_sptr self, int m)"""
        return _radar_swig.split_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(split_cc_sptr self) -> int"""
        return _radar_swig.split_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(split_cc_sptr self, int i) -> long"""
        return _radar_swig.split_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(split_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(split_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.split_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(split_cc_sptr self, int i) -> long"""
        return _radar_swig.split_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(split_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(split_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.split_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(split_cc_sptr self, int which) -> float
        pc_input_buffers_full(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(split_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(split_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(split_cc_sptr self, int which) -> float
        pc_output_buffers_full(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(split_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(split_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(split_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(split_cc_sptr self) -> float"""
        return _radar_swig.split_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(split_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.split_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(split_cc_sptr self)"""
        return _radar_swig.split_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(split_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.split_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(split_cc_sptr self) -> int"""
        return _radar_swig.split_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(split_cc_sptr self) -> int"""
        return _radar_swig.split_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(split_cc_sptr self, int priority) -> int"""
        return _radar_swig.split_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(split_cc_sptr self) -> std::string"""
        return _radar_swig.split_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(split_cc_sptr self) -> std::string"""
        return _radar_swig.split_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(split_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.split_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(split_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.split_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(split_cc_sptr self) -> long"""
        return _radar_swig.split_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(split_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.split_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(split_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.split_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(split_cc_sptr self) -> std::string"""
        return _radar_swig.split_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(split_cc_sptr self, std::string name)"""
        return _radar_swig.split_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(split_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.split_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(split_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.split_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(split_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.split_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(split_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.split_cc_sptr_message_subscribers(self, *args, **kwargs)

split_cc_sptr_swigregister = _radar_swig.split_cc_sptr_swigregister
split_cc_sptr_swigregister(split_cc_sptr)

split_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
split_cc = split_cc.make;

class os_cfar_c(object):
    """Proxy of C++ gr::radar::os_cfar_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float mult_threshold, 
            bool merge_consecutive=True, std::string const & len_key="packet_len") -> os_cfar_c_sptr
        """
        return _radar_swig.os_cfar_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_os_cfar_c
    __del__ = lambda self : None;
os_cfar_c_swigregister = _radar_swig.os_cfar_c_swigregister
os_cfar_c_swigregister(os_cfar_c)

def os_cfar_c_make(*args, **kwargs):
  """
    os_cfar_c_make(int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float mult_threshold, 
        bool merge_consecutive=True, std::string const & len_key="packet_len") -> os_cfar_c_sptr
    """
  return _radar_swig.os_cfar_c_make(*args, **kwargs)

class os_cfar_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::os_cfar_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::os_cfar_c)> self) -> os_cfar_c_sptr
        __init__(boost::shared_ptr<(gr::radar::os_cfar_c)> self, os_cfar_c p) -> os_cfar_c_sptr
        """
        this = _radar_swig.new_os_cfar_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(os_cfar_c_sptr self) -> os_cfar_c"""
        return _radar_swig.os_cfar_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_os_cfar_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(os_cfar_c_sptr self, int samp_rate, int samp_compare, int samp_protect, float rel_threshold, float mult_threshold, 
            bool merge_consecutive=True, std::string const & len_key="packet_len") -> os_cfar_c_sptr
        """
        return _radar_swig.os_cfar_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(os_cfar_c_sptr self) -> unsigned int"""
        return _radar_swig.os_cfar_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(os_cfar_c_sptr self, int which, int delay)
        declare_sample_delay(os_cfar_c_sptr self, unsigned int delay)
        """
        return _radar_swig.os_cfar_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(os_cfar_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.os_cfar_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(os_cfar_c_sptr self) -> double"""
        return _radar_swig.os_cfar_c_sptr_relative_rate(self)

    def start(self):
        """start(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_start(self)

    def stop(self):
        """stop(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(os_cfar_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.os_cfar_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(os_cfar_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.os_cfar_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(os_cfar_c_sptr self, int m)"""
        return _radar_swig.os_cfar_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(os_cfar_c_sptr self)"""
        return _radar_swig.os_cfar_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(os_cfar_c_sptr self) -> bool"""
        return _radar_swig.os_cfar_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(os_cfar_c_sptr self, int m)"""
        return _radar_swig.os_cfar_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(os_cfar_c_sptr self, int i) -> long"""
        return _radar_swig.os_cfar_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(os_cfar_c_sptr self, long max_output_buffer)
        set_max_output_buffer(os_cfar_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.os_cfar_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(os_cfar_c_sptr self, int i) -> long"""
        return _radar_swig.os_cfar_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(os_cfar_c_sptr self, long min_output_buffer)
        set_min_output_buffer(os_cfar_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.os_cfar_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(os_cfar_c_sptr self, int which) -> float
        pc_input_buffers_full_var(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(os_cfar_c_sptr self, int which) -> float
        pc_output_buffers_full_var(os_cfar_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.os_cfar_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(os_cfar_c_sptr self) -> float"""
        return _radar_swig.os_cfar_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(os_cfar_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.os_cfar_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(os_cfar_c_sptr self)"""
        return _radar_swig.os_cfar_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(os_cfar_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.os_cfar_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(os_cfar_c_sptr self) -> int"""
        return _radar_swig.os_cfar_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(os_cfar_c_sptr self, int priority) -> int"""
        return _radar_swig.os_cfar_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(os_cfar_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.os_cfar_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(os_cfar_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.os_cfar_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(os_cfar_c_sptr self) -> long"""
        return _radar_swig.os_cfar_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(os_cfar_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.os_cfar_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(os_cfar_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.os_cfar_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(os_cfar_c_sptr self) -> std::string"""
        return _radar_swig.os_cfar_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(os_cfar_c_sptr self, std::string name)"""
        return _radar_swig.os_cfar_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(os_cfar_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.os_cfar_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(os_cfar_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(os_cfar_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(os_cfar_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.os_cfar_c_sptr_message_subscribers(self, *args, **kwargs)

os_cfar_c_sptr_swigregister = _radar_swig.os_cfar_c_sptr_swigregister
os_cfar_c_sptr_swigregister(os_cfar_c_sptr)

os_cfar_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
os_cfar_c = os_cfar_c.make;

class ts_fft_cc(object):
    """Proxy of C++ gr::radar::ts_fft_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(apply_filter=0, len_key="packet_len"):
        """make(int apply_filter=0, std::string const & len_key="packet_len") -> ts_fft_cc_sptr"""
        return _radar_swig.ts_fft_cc_make(apply_filter, len_key)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_ts_fft_cc
    __del__ = lambda self : None;
ts_fft_cc_swigregister = _radar_swig.ts_fft_cc_swigregister
ts_fft_cc_swigregister(ts_fft_cc)

def ts_fft_cc_make(apply_filter=0, len_key="packet_len"):
  """ts_fft_cc_make(int apply_filter=0, std::string const & len_key="packet_len") -> ts_fft_cc_sptr"""
  return _radar_swig.ts_fft_cc_make(apply_filter, len_key)

class ts_fft_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::ts_fft_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::ts_fft_cc)> self) -> ts_fft_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::ts_fft_cc)> self, ts_fft_cc p) -> ts_fft_cc_sptr
        """
        this = _radar_swig.new_ts_fft_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ts_fft_cc_sptr self) -> ts_fft_cc"""
        return _radar_swig.ts_fft_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_ts_fft_cc_sptr
    __del__ = lambda self : None;
    def make(self, apply_filter=0, len_key="packet_len"):
        """make(ts_fft_cc_sptr self, int apply_filter=0, std::string const & len_key="packet_len") -> ts_fft_cc_sptr"""
        return _radar_swig.ts_fft_cc_sptr_make(self, apply_filter, len_key)

    def history(self):
        """history(ts_fft_cc_sptr self) -> unsigned int"""
        return _radar_swig.ts_fft_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ts_fft_cc_sptr self, int which, int delay)
        declare_sample_delay(ts_fft_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.ts_fft_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ts_fft_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.ts_fft_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ts_fft_cc_sptr self) -> int"""
        return _radar_swig.ts_fft_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ts_fft_cc_sptr self) -> double"""
        return _radar_swig.ts_fft_cc_sptr_relative_rate(self)

    def start(self):
        """start(ts_fft_cc_sptr self) -> bool"""
        return _radar_swig.ts_fft_cc_sptr_start(self)

    def stop(self):
        """stop(ts_fft_cc_sptr self) -> bool"""
        return _radar_swig.ts_fft_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ts_fft_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.ts_fft_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ts_fft_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.ts_fft_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ts_fft_cc_sptr self) -> int"""
        return _radar_swig.ts_fft_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ts_fft_cc_sptr self, int m)"""
        return _radar_swig.ts_fft_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ts_fft_cc_sptr self)"""
        return _radar_swig.ts_fft_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ts_fft_cc_sptr self) -> bool"""
        return _radar_swig.ts_fft_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ts_fft_cc_sptr self, int m)"""
        return _radar_swig.ts_fft_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ts_fft_cc_sptr self) -> int"""
        return _radar_swig.ts_fft_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ts_fft_cc_sptr self, int i) -> long"""
        return _radar_swig.ts_fft_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ts_fft_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(ts_fft_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.ts_fft_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ts_fft_cc_sptr self, int i) -> long"""
        return _radar_swig.ts_fft_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ts_fft_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(ts_fft_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.ts_fft_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ts_fft_cc_sptr self, int which) -> float
        pc_input_buffers_full(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ts_fft_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ts_fft_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ts_fft_cc_sptr self, int which) -> float
        pc_output_buffers_full(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ts_fft_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ts_fft_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(ts_fft_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.ts_fft_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ts_fft_cc_sptr self) -> float"""
        return _radar_swig.ts_fft_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ts_fft_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.ts_fft_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ts_fft_cc_sptr self)"""
        return _radar_swig.ts_fft_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ts_fft_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.ts_fft_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ts_fft_cc_sptr self) -> int"""
        return _radar_swig.ts_fft_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ts_fft_cc_sptr self) -> int"""
        return _radar_swig.ts_fft_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ts_fft_cc_sptr self, int priority) -> int"""
        return _radar_swig.ts_fft_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ts_fft_cc_sptr self) -> std::string"""
        return _radar_swig.ts_fft_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ts_fft_cc_sptr self) -> std::string"""
        return _radar_swig.ts_fft_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ts_fft_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.ts_fft_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ts_fft_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.ts_fft_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ts_fft_cc_sptr self) -> long"""
        return _radar_swig.ts_fft_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ts_fft_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.ts_fft_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ts_fft_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.ts_fft_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ts_fft_cc_sptr self) -> std::string"""
        return _radar_swig.ts_fft_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ts_fft_cc_sptr self, std::string name)"""
        return _radar_swig.ts_fft_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ts_fft_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.ts_fft_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ts_fft_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.ts_fft_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ts_fft_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.ts_fft_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ts_fft_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.ts_fft_cc_sptr_message_subscribers(self, *args, **kwargs)

ts_fft_cc_sptr_swigregister = _radar_swig.ts_fft_cc_sptr_swigregister
ts_fft_cc_sptr_swigregister(ts_fft_cc_sptr)

ts_fft_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ts_fft_cc = ts_fft_cc.make;

class estimator_cw(object):
    """Proxy of C++ gr::radar::estimator_cw class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float center_freq) -> estimator_cw_sptr"""
        return _radar_swig.estimator_cw_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_estimator_cw
    __del__ = lambda self : None;
estimator_cw_swigregister = _radar_swig.estimator_cw_swigregister
estimator_cw_swigregister(estimator_cw)

def estimator_cw_make(*args, **kwargs):
  """estimator_cw_make(float center_freq) -> estimator_cw_sptr"""
  return _radar_swig.estimator_cw_make(*args, **kwargs)

class estimator_cw_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::estimator_cw)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::estimator_cw)> self) -> estimator_cw_sptr
        __init__(boost::shared_ptr<(gr::radar::estimator_cw)> self, estimator_cw p) -> estimator_cw_sptr
        """
        this = _radar_swig.new_estimator_cw_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(estimator_cw_sptr self) -> estimator_cw"""
        return _radar_swig.estimator_cw_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_estimator_cw_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(estimator_cw_sptr self, float center_freq) -> estimator_cw_sptr"""
        return _radar_swig.estimator_cw_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(estimator_cw_sptr self) -> unsigned int"""
        return _radar_swig.estimator_cw_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(estimator_cw_sptr self, int which, int delay)
        declare_sample_delay(estimator_cw_sptr self, unsigned int delay)
        """
        return _radar_swig.estimator_cw_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(estimator_cw_sptr self, int which) -> unsigned int"""
        return _radar_swig.estimator_cw_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(estimator_cw_sptr self) -> int"""
        return _radar_swig.estimator_cw_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(estimator_cw_sptr self) -> double"""
        return _radar_swig.estimator_cw_sptr_relative_rate(self)

    def start(self):
        """start(estimator_cw_sptr self) -> bool"""
        return _radar_swig.estimator_cw_sptr_start(self)

    def stop(self):
        """stop(estimator_cw_sptr self) -> bool"""
        return _radar_swig.estimator_cw_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(estimator_cw_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.estimator_cw_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(estimator_cw_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.estimator_cw_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(estimator_cw_sptr self) -> int"""
        return _radar_swig.estimator_cw_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(estimator_cw_sptr self, int m)"""
        return _radar_swig.estimator_cw_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(estimator_cw_sptr self)"""
        return _radar_swig.estimator_cw_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(estimator_cw_sptr self) -> bool"""
        return _radar_swig.estimator_cw_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(estimator_cw_sptr self, int m)"""
        return _radar_swig.estimator_cw_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(estimator_cw_sptr self) -> int"""
        return _radar_swig.estimator_cw_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(estimator_cw_sptr self, int i) -> long"""
        return _radar_swig.estimator_cw_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(estimator_cw_sptr self, long max_output_buffer)
        set_max_output_buffer(estimator_cw_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.estimator_cw_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(estimator_cw_sptr self, int i) -> long"""
        return _radar_swig.estimator_cw_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(estimator_cw_sptr self, long min_output_buffer)
        set_min_output_buffer(estimator_cw_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.estimator_cw_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(estimator_cw_sptr self, int which) -> float
        pc_input_buffers_full(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(estimator_cw_sptr self, int which) -> float
        pc_input_buffers_full_avg(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(estimator_cw_sptr self, int which) -> float
        pc_input_buffers_full_var(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(estimator_cw_sptr self, int which) -> float
        pc_output_buffers_full(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(estimator_cw_sptr self, int which) -> float
        pc_output_buffers_full_avg(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(estimator_cw_sptr self, int which) -> float
        pc_output_buffers_full_var(estimator_cw_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_cw_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(estimator_cw_sptr self) -> float"""
        return _radar_swig.estimator_cw_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(estimator_cw_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.estimator_cw_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(estimator_cw_sptr self)"""
        return _radar_swig.estimator_cw_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(estimator_cw_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.estimator_cw_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(estimator_cw_sptr self) -> int"""
        return _radar_swig.estimator_cw_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(estimator_cw_sptr self) -> int"""
        return _radar_swig.estimator_cw_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(estimator_cw_sptr self, int priority) -> int"""
        return _radar_swig.estimator_cw_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(estimator_cw_sptr self) -> std::string"""
        return _radar_swig.estimator_cw_sptr_name(self)

    def symbol_name(self):
        """symbol_name(estimator_cw_sptr self) -> std::string"""
        return _radar_swig.estimator_cw_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(estimator_cw_sptr self) -> io_signature_sptr"""
        return _radar_swig.estimator_cw_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(estimator_cw_sptr self) -> io_signature_sptr"""
        return _radar_swig.estimator_cw_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(estimator_cw_sptr self) -> long"""
        return _radar_swig.estimator_cw_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(estimator_cw_sptr self) -> basic_block_sptr"""
        return _radar_swig.estimator_cw_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(estimator_cw_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.estimator_cw_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(estimator_cw_sptr self) -> std::string"""
        return _radar_swig.estimator_cw_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(estimator_cw_sptr self, std::string name)"""
        return _radar_swig.estimator_cw_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(estimator_cw_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.estimator_cw_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(estimator_cw_sptr self) -> swig_int_ptr"""
        return _radar_swig.estimator_cw_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(estimator_cw_sptr self) -> swig_int_ptr"""
        return _radar_swig.estimator_cw_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(estimator_cw_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.estimator_cw_sptr_message_subscribers(self, *args, **kwargs)

estimator_cw_sptr_swigregister = _radar_swig.estimator_cw_sptr_swigregister
estimator_cw_sptr_swigregister(estimator_cw_sptr)

estimator_cw_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
estimator_cw = estimator_cw.make;

class print_results(object):
    """Proxy of C++ gr::radar::print_results class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> print_results_sptr"""
        return _radar_swig.print_results_make()

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_print_results
    __del__ = lambda self : None;
print_results_swigregister = _radar_swig.print_results_swigregister
print_results_swigregister(print_results)

def print_results_make():
  """print_results_make() -> print_results_sptr"""
  return _radar_swig.print_results_make()

class print_results_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::print_results)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::print_results)> self) -> print_results_sptr
        __init__(boost::shared_ptr<(gr::radar::print_results)> self, print_results p) -> print_results_sptr
        """
        this = _radar_swig.new_print_results_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(print_results_sptr self) -> print_results"""
        return _radar_swig.print_results_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_print_results_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(print_results_sptr self) -> print_results_sptr"""
        return _radar_swig.print_results_sptr_make(self)

    def history(self):
        """history(print_results_sptr self) -> unsigned int"""
        return _radar_swig.print_results_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(print_results_sptr self, int which, int delay)
        declare_sample_delay(print_results_sptr self, unsigned int delay)
        """
        return _radar_swig.print_results_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(print_results_sptr self, int which) -> unsigned int"""
        return _radar_swig.print_results_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(print_results_sptr self) -> int"""
        return _radar_swig.print_results_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(print_results_sptr self) -> double"""
        return _radar_swig.print_results_sptr_relative_rate(self)

    def start(self):
        """start(print_results_sptr self) -> bool"""
        return _radar_swig.print_results_sptr_start(self)

    def stop(self):
        """stop(print_results_sptr self) -> bool"""
        return _radar_swig.print_results_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(print_results_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.print_results_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(print_results_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.print_results_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(print_results_sptr self) -> int"""
        return _radar_swig.print_results_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(print_results_sptr self, int m)"""
        return _radar_swig.print_results_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(print_results_sptr self)"""
        return _radar_swig.print_results_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(print_results_sptr self) -> bool"""
        return _radar_swig.print_results_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(print_results_sptr self, int m)"""
        return _radar_swig.print_results_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(print_results_sptr self) -> int"""
        return _radar_swig.print_results_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(print_results_sptr self, int i) -> long"""
        return _radar_swig.print_results_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(print_results_sptr self, long max_output_buffer)
        set_max_output_buffer(print_results_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.print_results_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(print_results_sptr self, int i) -> long"""
        return _radar_swig.print_results_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(print_results_sptr self, long min_output_buffer)
        set_min_output_buffer(print_results_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.print_results_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(print_results_sptr self, int which) -> float
        pc_input_buffers_full(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(print_results_sptr self, int which) -> float
        pc_input_buffers_full_avg(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(print_results_sptr self, int which) -> float
        pc_input_buffers_full_var(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(print_results_sptr self, int which) -> float
        pc_output_buffers_full(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(print_results_sptr self, int which) -> float
        pc_output_buffers_full_avg(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(print_results_sptr self, int which) -> float
        pc_output_buffers_full_var(print_results_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_results_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(print_results_sptr self) -> float"""
        return _radar_swig.print_results_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(print_results_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.print_results_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(print_results_sptr self)"""
        return _radar_swig.print_results_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(print_results_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.print_results_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(print_results_sptr self) -> int"""
        return _radar_swig.print_results_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(print_results_sptr self) -> int"""
        return _radar_swig.print_results_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(print_results_sptr self, int priority) -> int"""
        return _radar_swig.print_results_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(print_results_sptr self) -> std::string"""
        return _radar_swig.print_results_sptr_name(self)

    def symbol_name(self):
        """symbol_name(print_results_sptr self) -> std::string"""
        return _radar_swig.print_results_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(print_results_sptr self) -> io_signature_sptr"""
        return _radar_swig.print_results_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(print_results_sptr self) -> io_signature_sptr"""
        return _radar_swig.print_results_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(print_results_sptr self) -> long"""
        return _radar_swig.print_results_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(print_results_sptr self) -> basic_block_sptr"""
        return _radar_swig.print_results_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(print_results_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.print_results_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(print_results_sptr self) -> std::string"""
        return _radar_swig.print_results_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(print_results_sptr self, std::string name)"""
        return _radar_swig.print_results_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(print_results_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.print_results_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(print_results_sptr self) -> swig_int_ptr"""
        return _radar_swig.print_results_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(print_results_sptr self) -> swig_int_ptr"""
        return _radar_swig.print_results_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(print_results_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.print_results_sptr_message_subscribers(self, *args, **kwargs)

print_results_sptr_swigregister = _radar_swig.print_results_sptr_swigregister
print_results_sptr_swigregister(print_results_sptr)

print_results_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
print_results = print_results.make;

class static_target_simulator_cc(object):
    """Proxy of C++ gr::radar::static_target_simulator_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, 
            int samp_rate, float center_freq, float self_coupling_db, 
            bool rndm_phaseshift=True, bool self_coupling=True, std::string const & len_key="packet_len") -> static_target_simulator_cc_sptr
        """
        return _radar_swig.static_target_simulator_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_static_target_simulator_cc
    __del__ = lambda self : None;
static_target_simulator_cc_swigregister = _radar_swig.static_target_simulator_cc_swigregister
static_target_simulator_cc_swigregister(static_target_simulator_cc)

def static_target_simulator_cc_make(*args, **kwargs):
  """
    static_target_simulator_cc_make(pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, 
        int samp_rate, float center_freq, float self_coupling_db, 
        bool rndm_phaseshift=True, bool self_coupling=True, std::string const & len_key="packet_len") -> static_target_simulator_cc_sptr
    """
  return _radar_swig.static_target_simulator_cc_make(*args, **kwargs)

class static_target_simulator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::static_target_simulator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::static_target_simulator_cc)> self) -> static_target_simulator_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::static_target_simulator_cc)> self, static_target_simulator_cc p) -> static_target_simulator_cc_sptr
        """
        this = _radar_swig.new_static_target_simulator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(static_target_simulator_cc_sptr self) -> static_target_simulator_cc"""
        return _radar_swig.static_target_simulator_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_static_target_simulator_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(static_target_simulator_cc_sptr self, pmt_vector_float range, pmt_vector_float velocity, pmt_vector_float rcs, pmt_vector_float azimuth, 
            int samp_rate, float center_freq, float self_coupling_db, 
            bool rndm_phaseshift=True, bool self_coupling=True, std::string const & len_key="packet_len") -> static_target_simulator_cc_sptr
        """
        return _radar_swig.static_target_simulator_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(static_target_simulator_cc_sptr self) -> unsigned int"""
        return _radar_swig.static_target_simulator_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(static_target_simulator_cc_sptr self, int which, int delay)
        declare_sample_delay(static_target_simulator_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.static_target_simulator_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(static_target_simulator_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.static_target_simulator_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(static_target_simulator_cc_sptr self) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(static_target_simulator_cc_sptr self) -> double"""
        return _radar_swig.static_target_simulator_cc_sptr_relative_rate(self)

    def start(self):
        """start(static_target_simulator_cc_sptr self) -> bool"""
        return _radar_swig.static_target_simulator_cc_sptr_start(self)

    def stop(self):
        """stop(static_target_simulator_cc_sptr self) -> bool"""
        return _radar_swig.static_target_simulator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(static_target_simulator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.static_target_simulator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(static_target_simulator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.static_target_simulator_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(static_target_simulator_cc_sptr self) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(static_target_simulator_cc_sptr self, int m)"""
        return _radar_swig.static_target_simulator_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(static_target_simulator_cc_sptr self)"""
        return _radar_swig.static_target_simulator_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(static_target_simulator_cc_sptr self) -> bool"""
        return _radar_swig.static_target_simulator_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(static_target_simulator_cc_sptr self, int m)"""
        return _radar_swig.static_target_simulator_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(static_target_simulator_cc_sptr self) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(static_target_simulator_cc_sptr self, int i) -> long"""
        return _radar_swig.static_target_simulator_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(static_target_simulator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(static_target_simulator_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.static_target_simulator_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(static_target_simulator_cc_sptr self, int i) -> long"""
        return _radar_swig.static_target_simulator_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(static_target_simulator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(static_target_simulator_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.static_target_simulator_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(static_target_simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(static_target_simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(static_target_simulator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(static_target_simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(static_target_simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(static_target_simulator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(static_target_simulator_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.static_target_simulator_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(static_target_simulator_cc_sptr self) -> float"""
        return _radar_swig.static_target_simulator_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(static_target_simulator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.static_target_simulator_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(static_target_simulator_cc_sptr self)"""
        return _radar_swig.static_target_simulator_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(static_target_simulator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.static_target_simulator_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(static_target_simulator_cc_sptr self) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(static_target_simulator_cc_sptr self) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(static_target_simulator_cc_sptr self, int priority) -> int"""
        return _radar_swig.static_target_simulator_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(static_target_simulator_cc_sptr self) -> std::string"""
        return _radar_swig.static_target_simulator_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(static_target_simulator_cc_sptr self) -> std::string"""
        return _radar_swig.static_target_simulator_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(static_target_simulator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.static_target_simulator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(static_target_simulator_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.static_target_simulator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(static_target_simulator_cc_sptr self) -> long"""
        return _radar_swig.static_target_simulator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(static_target_simulator_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.static_target_simulator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(static_target_simulator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.static_target_simulator_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(static_target_simulator_cc_sptr self) -> std::string"""
        return _radar_swig.static_target_simulator_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(static_target_simulator_cc_sptr self, std::string name)"""
        return _radar_swig.static_target_simulator_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(static_target_simulator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.static_target_simulator_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(static_target_simulator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.static_target_simulator_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(static_target_simulator_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.static_target_simulator_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(static_target_simulator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.static_target_simulator_cc_sptr_message_subscribers(self, *args, **kwargs)

static_target_simulator_cc_sptr_swigregister = _radar_swig.static_target_simulator_cc_sptr_swigregister
static_target_simulator_cc_sptr_swigregister(static_target_simulator_cc_sptr)

static_target_simulator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
static_target_simulator_cc = static_target_simulator_cc.make;

class print_peaks(object):
    """Proxy of C++ gr::radar::print_peaks class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> print_peaks_sptr"""
        return _radar_swig.print_peaks_make()

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_print_peaks
    __del__ = lambda self : None;
print_peaks_swigregister = _radar_swig.print_peaks_swigregister
print_peaks_swigregister(print_peaks)

def print_peaks_make():
  """print_peaks_make() -> print_peaks_sptr"""
  return _radar_swig.print_peaks_make()

class print_peaks_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::print_peaks)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::print_peaks)> self) -> print_peaks_sptr
        __init__(boost::shared_ptr<(gr::radar::print_peaks)> self, print_peaks p) -> print_peaks_sptr
        """
        this = _radar_swig.new_print_peaks_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(print_peaks_sptr self) -> print_peaks"""
        return _radar_swig.print_peaks_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_print_peaks_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(print_peaks_sptr self) -> print_peaks_sptr"""
        return _radar_swig.print_peaks_sptr_make(self)

    def history(self):
        """history(print_peaks_sptr self) -> unsigned int"""
        return _radar_swig.print_peaks_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(print_peaks_sptr self, int which, int delay)
        declare_sample_delay(print_peaks_sptr self, unsigned int delay)
        """
        return _radar_swig.print_peaks_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(print_peaks_sptr self, int which) -> unsigned int"""
        return _radar_swig.print_peaks_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(print_peaks_sptr self) -> int"""
        return _radar_swig.print_peaks_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(print_peaks_sptr self) -> double"""
        return _radar_swig.print_peaks_sptr_relative_rate(self)

    def start(self):
        """start(print_peaks_sptr self) -> bool"""
        return _radar_swig.print_peaks_sptr_start(self)

    def stop(self):
        """stop(print_peaks_sptr self) -> bool"""
        return _radar_swig.print_peaks_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(print_peaks_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.print_peaks_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(print_peaks_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.print_peaks_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(print_peaks_sptr self) -> int"""
        return _radar_swig.print_peaks_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(print_peaks_sptr self, int m)"""
        return _radar_swig.print_peaks_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(print_peaks_sptr self)"""
        return _radar_swig.print_peaks_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(print_peaks_sptr self) -> bool"""
        return _radar_swig.print_peaks_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(print_peaks_sptr self, int m)"""
        return _radar_swig.print_peaks_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(print_peaks_sptr self) -> int"""
        return _radar_swig.print_peaks_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(print_peaks_sptr self, int i) -> long"""
        return _radar_swig.print_peaks_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(print_peaks_sptr self, long max_output_buffer)
        set_max_output_buffer(print_peaks_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.print_peaks_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(print_peaks_sptr self, int i) -> long"""
        return _radar_swig.print_peaks_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(print_peaks_sptr self, long min_output_buffer)
        set_min_output_buffer(print_peaks_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.print_peaks_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(print_peaks_sptr self, int which) -> float
        pc_input_buffers_full(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(print_peaks_sptr self, int which) -> float
        pc_input_buffers_full_avg(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(print_peaks_sptr self, int which) -> float
        pc_input_buffers_full_var(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(print_peaks_sptr self, int which) -> float
        pc_output_buffers_full(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(print_peaks_sptr self, int which) -> float
        pc_output_buffers_full_avg(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(print_peaks_sptr self, int which) -> float
        pc_output_buffers_full_var(print_peaks_sptr self) -> pmt_vector_float
        """
        return _radar_swig.print_peaks_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(print_peaks_sptr self) -> float"""
        return _radar_swig.print_peaks_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(print_peaks_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.print_peaks_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(print_peaks_sptr self)"""
        return _radar_swig.print_peaks_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(print_peaks_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.print_peaks_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(print_peaks_sptr self) -> int"""
        return _radar_swig.print_peaks_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(print_peaks_sptr self) -> int"""
        return _radar_swig.print_peaks_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(print_peaks_sptr self, int priority) -> int"""
        return _radar_swig.print_peaks_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(print_peaks_sptr self) -> std::string"""
        return _radar_swig.print_peaks_sptr_name(self)

    def symbol_name(self):
        """symbol_name(print_peaks_sptr self) -> std::string"""
        return _radar_swig.print_peaks_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(print_peaks_sptr self) -> io_signature_sptr"""
        return _radar_swig.print_peaks_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(print_peaks_sptr self) -> io_signature_sptr"""
        return _radar_swig.print_peaks_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(print_peaks_sptr self) -> long"""
        return _radar_swig.print_peaks_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(print_peaks_sptr self) -> basic_block_sptr"""
        return _radar_swig.print_peaks_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(print_peaks_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.print_peaks_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(print_peaks_sptr self) -> std::string"""
        return _radar_swig.print_peaks_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(print_peaks_sptr self, std::string name)"""
        return _radar_swig.print_peaks_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(print_peaks_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.print_peaks_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(print_peaks_sptr self) -> swig_int_ptr"""
        return _radar_swig.print_peaks_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(print_peaks_sptr self) -> swig_int_ptr"""
        return _radar_swig.print_peaks_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(print_peaks_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.print_peaks_sptr_message_subscribers(self, *args, **kwargs)

print_peaks_sptr_swigregister = _radar_swig.print_peaks_sptr_swigregister
print_peaks_sptr_swigregister(print_peaks_sptr)

print_peaks_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
print_peaks = print_peaks.make;

class signal_generator_fsk_c(object):
    """Proxy of C++ gr::radar::signal_generator_fsk_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int samp_rate, int samp_per_freq, int blocks_per_tag, float freq_low, float freq_high, 
            float amplitude, std::string const & len_key="packet_len") -> signal_generator_fsk_c_sptr
        """
        return _radar_swig.signal_generator_fsk_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_signal_generator_fsk_c
    __del__ = lambda self : None;
signal_generator_fsk_c_swigregister = _radar_swig.signal_generator_fsk_c_swigregister
signal_generator_fsk_c_swigregister(signal_generator_fsk_c)

def signal_generator_fsk_c_make(*args, **kwargs):
  """
    signal_generator_fsk_c_make(int samp_rate, int samp_per_freq, int blocks_per_tag, float freq_low, float freq_high, 
        float amplitude, std::string const & len_key="packet_len") -> signal_generator_fsk_c_sptr
    """
  return _radar_swig.signal_generator_fsk_c_make(*args, **kwargs)

class signal_generator_fsk_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::signal_generator_fsk_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::signal_generator_fsk_c)> self) -> signal_generator_fsk_c_sptr
        __init__(boost::shared_ptr<(gr::radar::signal_generator_fsk_c)> self, signal_generator_fsk_c p) -> signal_generator_fsk_c_sptr
        """
        this = _radar_swig.new_signal_generator_fsk_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(signal_generator_fsk_c_sptr self) -> signal_generator_fsk_c"""
        return _radar_swig.signal_generator_fsk_c_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_signal_generator_fsk_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(signal_generator_fsk_c_sptr self, int samp_rate, int samp_per_freq, int blocks_per_tag, float freq_low, float freq_high, 
            float amplitude, std::string const & len_key="packet_len") -> signal_generator_fsk_c_sptr
        """
        return _radar_swig.signal_generator_fsk_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(signal_generator_fsk_c_sptr self) -> unsigned int"""
        return _radar_swig.signal_generator_fsk_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(signal_generator_fsk_c_sptr self, int which, int delay)
        declare_sample_delay(signal_generator_fsk_c_sptr self, unsigned int delay)
        """
        return _radar_swig.signal_generator_fsk_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(signal_generator_fsk_c_sptr self, int which) -> unsigned int"""
        return _radar_swig.signal_generator_fsk_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(signal_generator_fsk_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(signal_generator_fsk_c_sptr self) -> double"""
        return _radar_swig.signal_generator_fsk_c_sptr_relative_rate(self)

    def start(self):
        """start(signal_generator_fsk_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fsk_c_sptr_start(self)

    def stop(self):
        """stop(signal_generator_fsk_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fsk_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(signal_generator_fsk_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.signal_generator_fsk_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(signal_generator_fsk_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.signal_generator_fsk_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(signal_generator_fsk_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(signal_generator_fsk_c_sptr self, int m)"""
        return _radar_swig.signal_generator_fsk_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(signal_generator_fsk_c_sptr self)"""
        return _radar_swig.signal_generator_fsk_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(signal_generator_fsk_c_sptr self) -> bool"""
        return _radar_swig.signal_generator_fsk_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(signal_generator_fsk_c_sptr self, int m)"""
        return _radar_swig.signal_generator_fsk_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(signal_generator_fsk_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(signal_generator_fsk_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_fsk_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(signal_generator_fsk_c_sptr self, long max_output_buffer)
        set_max_output_buffer(signal_generator_fsk_c_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.signal_generator_fsk_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(signal_generator_fsk_c_sptr self, int i) -> long"""
        return _radar_swig.signal_generator_fsk_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(signal_generator_fsk_c_sptr self, long min_output_buffer)
        set_min_output_buffer(signal_generator_fsk_c_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.signal_generator_fsk_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(signal_generator_fsk_c_sptr self, int which) -> float
        pc_input_buffers_full(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(signal_generator_fsk_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(signal_generator_fsk_c_sptr self, int which) -> float
        pc_input_buffers_full_var(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(signal_generator_fsk_c_sptr self, int which) -> float
        pc_output_buffers_full(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(signal_generator_fsk_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(signal_generator_fsk_c_sptr self, int which) -> float
        pc_output_buffers_full_var(signal_generator_fsk_c_sptr self) -> pmt_vector_float
        """
        return _radar_swig.signal_generator_fsk_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(signal_generator_fsk_c_sptr self) -> float"""
        return _radar_swig.signal_generator_fsk_c_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(signal_generator_fsk_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.signal_generator_fsk_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(signal_generator_fsk_c_sptr self)"""
        return _radar_swig.signal_generator_fsk_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(signal_generator_fsk_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.signal_generator_fsk_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(signal_generator_fsk_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(signal_generator_fsk_c_sptr self) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(signal_generator_fsk_c_sptr self, int priority) -> int"""
        return _radar_swig.signal_generator_fsk_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(signal_generator_fsk_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fsk_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(signal_generator_fsk_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fsk_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(signal_generator_fsk_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(signal_generator_fsk_c_sptr self) -> io_signature_sptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(signal_generator_fsk_c_sptr self) -> long"""
        return _radar_swig.signal_generator_fsk_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(signal_generator_fsk_c_sptr self) -> basic_block_sptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(signal_generator_fsk_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.signal_generator_fsk_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(signal_generator_fsk_c_sptr self) -> std::string"""
        return _radar_swig.signal_generator_fsk_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(signal_generator_fsk_c_sptr self, std::string name)"""
        return _radar_swig.signal_generator_fsk_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(signal_generator_fsk_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.signal_generator_fsk_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(signal_generator_fsk_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(signal_generator_fsk_c_sptr self) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(signal_generator_fsk_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.signal_generator_fsk_c_sptr_message_subscribers(self, *args, **kwargs)

signal_generator_fsk_c_sptr_swigregister = _radar_swig.signal_generator_fsk_c_sptr_swigregister
signal_generator_fsk_c_sptr_swigregister(signal_generator_fsk_c_sptr)

signal_generator_fsk_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
signal_generator_fsk_c = signal_generator_fsk_c.make;

class split_fsk_cc(object):
    """Proxy of C++ gr::radar::split_fsk_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int samp_per_freq, int samp_discard, std::string const & len_key="packet_len") -> split_fsk_cc_sptr"""
        return _radar_swig.split_fsk_cc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_split_fsk_cc
    __del__ = lambda self : None;
split_fsk_cc_swigregister = _radar_swig.split_fsk_cc_swigregister
split_fsk_cc_swigregister(split_fsk_cc)

def split_fsk_cc_make(*args, **kwargs):
  """split_fsk_cc_make(int samp_per_freq, int samp_discard, std::string const & len_key="packet_len") -> split_fsk_cc_sptr"""
  return _radar_swig.split_fsk_cc_make(*args, **kwargs)

class split_fsk_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::split_fsk_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::split_fsk_cc)> self) -> split_fsk_cc_sptr
        __init__(boost::shared_ptr<(gr::radar::split_fsk_cc)> self, split_fsk_cc p) -> split_fsk_cc_sptr
        """
        this = _radar_swig.new_split_fsk_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(split_fsk_cc_sptr self) -> split_fsk_cc"""
        return _radar_swig.split_fsk_cc_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_split_fsk_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(split_fsk_cc_sptr self, int samp_per_freq, int samp_discard, std::string const & len_key="packet_len") -> split_fsk_cc_sptr"""
        return _radar_swig.split_fsk_cc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(split_fsk_cc_sptr self) -> unsigned int"""
        return _radar_swig.split_fsk_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(split_fsk_cc_sptr self, int which, int delay)
        declare_sample_delay(split_fsk_cc_sptr self, unsigned int delay)
        """
        return _radar_swig.split_fsk_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(split_fsk_cc_sptr self, int which) -> unsigned int"""
        return _radar_swig.split_fsk_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(split_fsk_cc_sptr self) -> int"""
        return _radar_swig.split_fsk_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(split_fsk_cc_sptr self) -> double"""
        return _radar_swig.split_fsk_cc_sptr_relative_rate(self)

    def start(self):
        """start(split_fsk_cc_sptr self) -> bool"""
        return _radar_swig.split_fsk_cc_sptr_start(self)

    def stop(self):
        """stop(split_fsk_cc_sptr self) -> bool"""
        return _radar_swig.split_fsk_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(split_fsk_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.split_fsk_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(split_fsk_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.split_fsk_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(split_fsk_cc_sptr self) -> int"""
        return _radar_swig.split_fsk_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(split_fsk_cc_sptr self, int m)"""
        return _radar_swig.split_fsk_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(split_fsk_cc_sptr self)"""
        return _radar_swig.split_fsk_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(split_fsk_cc_sptr self) -> bool"""
        return _radar_swig.split_fsk_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(split_fsk_cc_sptr self, int m)"""
        return _radar_swig.split_fsk_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(split_fsk_cc_sptr self) -> int"""
        return _radar_swig.split_fsk_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(split_fsk_cc_sptr self, int i) -> long"""
        return _radar_swig.split_fsk_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(split_fsk_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(split_fsk_cc_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.split_fsk_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(split_fsk_cc_sptr self, int i) -> long"""
        return _radar_swig.split_fsk_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(split_fsk_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(split_fsk_cc_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.split_fsk_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(split_fsk_cc_sptr self, int which) -> float
        pc_input_buffers_full(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(split_fsk_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(split_fsk_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(split_fsk_cc_sptr self, int which) -> float
        pc_output_buffers_full(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(split_fsk_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(split_fsk_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(split_fsk_cc_sptr self) -> pmt_vector_float
        """
        return _radar_swig.split_fsk_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(split_fsk_cc_sptr self) -> float"""
        return _radar_swig.split_fsk_cc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(split_fsk_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.split_fsk_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(split_fsk_cc_sptr self)"""
        return _radar_swig.split_fsk_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(split_fsk_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.split_fsk_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(split_fsk_cc_sptr self) -> int"""
        return _radar_swig.split_fsk_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(split_fsk_cc_sptr self) -> int"""
        return _radar_swig.split_fsk_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(split_fsk_cc_sptr self, int priority) -> int"""
        return _radar_swig.split_fsk_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(split_fsk_cc_sptr self) -> std::string"""
        return _radar_swig.split_fsk_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(split_fsk_cc_sptr self) -> std::string"""
        return _radar_swig.split_fsk_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(split_fsk_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.split_fsk_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(split_fsk_cc_sptr self) -> io_signature_sptr"""
        return _radar_swig.split_fsk_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(split_fsk_cc_sptr self) -> long"""
        return _radar_swig.split_fsk_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(split_fsk_cc_sptr self) -> basic_block_sptr"""
        return _radar_swig.split_fsk_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(split_fsk_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.split_fsk_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(split_fsk_cc_sptr self) -> std::string"""
        return _radar_swig.split_fsk_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(split_fsk_cc_sptr self, std::string name)"""
        return _radar_swig.split_fsk_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(split_fsk_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.split_fsk_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(split_fsk_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.split_fsk_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(split_fsk_cc_sptr self) -> swig_int_ptr"""
        return _radar_swig.split_fsk_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(split_fsk_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.split_fsk_cc_sptr_message_subscribers(self, *args, **kwargs)

split_fsk_cc_sptr_swigregister = _radar_swig.split_fsk_cc_sptr_swigregister
split_fsk_cc_sptr_swigregister(split_fsk_cc_sptr)

split_fsk_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
split_fsk_cc = split_fsk_cc.make;

class estimator_fsk(object):
    """Proxy of C++ gr::radar::estimator_fsk class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(float center_freq, float delta_freq) -> estimator_fsk_sptr"""
        return _radar_swig.estimator_fsk_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _radar_swig.delete_estimator_fsk
    __del__ = lambda self : None;
estimator_fsk_swigregister = _radar_swig.estimator_fsk_swigregister
estimator_fsk_swigregister(estimator_fsk)

def estimator_fsk_make(*args, **kwargs):
  """estimator_fsk_make(float center_freq, float delta_freq) -> estimator_fsk_sptr"""
  return _radar_swig.estimator_fsk_make(*args, **kwargs)

class estimator_fsk_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::radar::estimator_fsk)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::radar::estimator_fsk)> self) -> estimator_fsk_sptr
        __init__(boost::shared_ptr<(gr::radar::estimator_fsk)> self, estimator_fsk p) -> estimator_fsk_sptr
        """
        this = _radar_swig.new_estimator_fsk_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(estimator_fsk_sptr self) -> estimator_fsk"""
        return _radar_swig.estimator_fsk_sptr___deref__(self)

    __swig_destroy__ = _radar_swig.delete_estimator_fsk_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(estimator_fsk_sptr self, float center_freq, float delta_freq) -> estimator_fsk_sptr"""
        return _radar_swig.estimator_fsk_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(estimator_fsk_sptr self) -> unsigned int"""
        return _radar_swig.estimator_fsk_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(estimator_fsk_sptr self, int which, int delay)
        declare_sample_delay(estimator_fsk_sptr self, unsigned int delay)
        """
        return _radar_swig.estimator_fsk_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(estimator_fsk_sptr self, int which) -> unsigned int"""
        return _radar_swig.estimator_fsk_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(estimator_fsk_sptr self) -> int"""
        return _radar_swig.estimator_fsk_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(estimator_fsk_sptr self) -> double"""
        return _radar_swig.estimator_fsk_sptr_relative_rate(self)

    def start(self):
        """start(estimator_fsk_sptr self) -> bool"""
        return _radar_swig.estimator_fsk_sptr_start(self)

    def stop(self):
        """stop(estimator_fsk_sptr self) -> bool"""
        return _radar_swig.estimator_fsk_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(estimator_fsk_sptr self, unsigned int which_input) -> uint64_t"""
        return _radar_swig.estimator_fsk_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(estimator_fsk_sptr self, unsigned int which_output) -> uint64_t"""
        return _radar_swig.estimator_fsk_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(estimator_fsk_sptr self) -> int"""
        return _radar_swig.estimator_fsk_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(estimator_fsk_sptr self, int m)"""
        return _radar_swig.estimator_fsk_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(estimator_fsk_sptr self)"""
        return _radar_swig.estimator_fsk_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(estimator_fsk_sptr self) -> bool"""
        return _radar_swig.estimator_fsk_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(estimator_fsk_sptr self, int m)"""
        return _radar_swig.estimator_fsk_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(estimator_fsk_sptr self) -> int"""
        return _radar_swig.estimator_fsk_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(estimator_fsk_sptr self, int i) -> long"""
        return _radar_swig.estimator_fsk_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(estimator_fsk_sptr self, long max_output_buffer)
        set_max_output_buffer(estimator_fsk_sptr self, int port, long max_output_buffer)
        """
        return _radar_swig.estimator_fsk_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(estimator_fsk_sptr self, int i) -> long"""
        return _radar_swig.estimator_fsk_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(estimator_fsk_sptr self, long min_output_buffer)
        set_min_output_buffer(estimator_fsk_sptr self, int port, long min_output_buffer)
        """
        return _radar_swig.estimator_fsk_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(estimator_fsk_sptr self, int which) -> float
        pc_input_buffers_full(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(estimator_fsk_sptr self, int which) -> float
        pc_input_buffers_full_avg(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(estimator_fsk_sptr self, int which) -> float
        pc_input_buffers_full_var(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(estimator_fsk_sptr self, int which) -> float
        pc_output_buffers_full(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(estimator_fsk_sptr self, int which) -> float
        pc_output_buffers_full_avg(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(estimator_fsk_sptr self, int which) -> float
        pc_output_buffers_full_var(estimator_fsk_sptr self) -> pmt_vector_float
        """
        return _radar_swig.estimator_fsk_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(estimator_fsk_sptr self) -> float"""
        return _radar_swig.estimator_fsk_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(estimator_fsk_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radar_swig.estimator_fsk_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(estimator_fsk_sptr self)"""
        return _radar_swig.estimator_fsk_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(estimator_fsk_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radar_swig.estimator_fsk_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(estimator_fsk_sptr self) -> int"""
        return _radar_swig.estimator_fsk_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(estimator_fsk_sptr self) -> int"""
        return _radar_swig.estimator_fsk_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(estimator_fsk_sptr self, int priority) -> int"""
        return _radar_swig.estimator_fsk_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(estimator_fsk_sptr self) -> std::string"""
        return _radar_swig.estimator_fsk_sptr_name(self)

    def symbol_name(self):
        """symbol_name(estimator_fsk_sptr self) -> std::string"""
        return _radar_swig.estimator_fsk_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(estimator_fsk_sptr self) -> io_signature_sptr"""
        return _radar_swig.estimator_fsk_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(estimator_fsk_sptr self) -> io_signature_sptr"""
        return _radar_swig.estimator_fsk_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(estimator_fsk_sptr self) -> long"""
        return _radar_swig.estimator_fsk_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(estimator_fsk_sptr self) -> basic_block_sptr"""
        return _radar_swig.estimator_fsk_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(estimator_fsk_sptr self, int ninputs, int noutputs) -> bool"""
        return _radar_swig.estimator_fsk_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(estimator_fsk_sptr self) -> std::string"""
        return _radar_swig.estimator_fsk_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(estimator_fsk_sptr self, std::string name)"""
        return _radar_swig.estimator_fsk_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(estimator_fsk_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _radar_swig.estimator_fsk_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(estimator_fsk_sptr self) -> swig_int_ptr"""
        return _radar_swig.estimator_fsk_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(estimator_fsk_sptr self) -> swig_int_ptr"""
        return _radar_swig.estimator_fsk_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(estimator_fsk_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _radar_swig.estimator_fsk_sptr_message_subscribers(self, *args, **kwargs)

estimator_fsk_sptr_swigregister = _radar_swig.estimator_fsk_sptr_swigregister
estimator_fsk_sptr_swigregister(estimator_fsk_sptr)

estimator_fsk_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
estimator_fsk = estimator_fsk.make;



